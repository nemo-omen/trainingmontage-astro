<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="/feed.xsl" type="text/xsl"?><rss version="2.0"><channel><title><![CDATA[Trainingmontage — Web Dev & Writing]]></title><description><![CDATA[I make cool things for the web and write about what I learn.]]></description><link>https://trainingmontage.dev/</link><language>en-us</language><item><title><![CDATA[CS Basics: Converting Between Different Bases]]></title><link>https://trainingmontage.dev/posts/cs-basics-converting-between-different-bases/</link><guid>https://trainingmontage.dev/posts/cs-basics-converting-between-different-bases/</guid><description><![CDATA[<div class="toc">
  <div class="flow">
    <p>
      This post is the 4th in a series about basic concepts in programming and Computer Science. You can find all the posts in the series below.
    </p>
    <ol>
      <li>
        <a href="/posts/cs-basics-binary-conversion">CS Basics: Binary Conversion</a>
      </li>
      <li>
        <a href="/posts/cs-basics-hex-and-32-bit-conversion">CS Basics: Hex and 32 Bit Conversion</a>
      </li>
      <li>
        <a href="/posts/cs-basics-detour--nibbles-msb-and-lsb">CS Basics: Detour - Nibbles, MSB, and LSB</a>
      </li>
      <li>
        <a href="/posts/cs-basics-converting-between-different-bases">CS Basics: Converting Between Different Bases</a>
      </li>
    </ol>
  </div>
</div>
<p>The previous three posts in this series covered the basic numeral systems you’ll come across as a programmer. Two of the most common are binary and hexadecimal, so it’s a good idea to be able to convert between the two.</p>
<p>We’ll start by converting from binary to hex, then do it the other way around, and then we’ll take a minute to talk about converting from some of the other systems we went over in earlier posts.</p>
<h3 id="binary-to-hex">Binary to Hex</h3>
<p>Remember the last post when we talked about nibbles? Those come in really handy when converting from binary to hex. That’s because one nibble can convert to a single hexadecimal digit.</p>
<table>
<thead>
  <tr>
    <th colspan="5" scope="col">
      15<sub>10</sub>
    </th>
  </tr>
</thead>
  <tr>
    <td>15<sub>2</sub></td>
    <td>1</td>
    <td>1</td>
    <td>1</td>
    <td>1</td>
  </tr>
  <tr>
    <td>15<sub>16</sub></td>
    <td colspan="4">F</td>
  </tr>
</table>
<p>Let’s break this down.</p>
<p>What we have in the binary number <code data-astro-raw>1 1 1 1</code> is one digit in the <code data-astro-raw>1s</code> place, one digit in the <code data-astro-raw>2s</code> place, one digit in the <code data-astro-raw>4s</code> place, and one digit in the <code data-astro-raw>8s</code> place.</p>
<p>When we move on to hex, we already know that each digit can represent 16 values from 0 - 15, so that’s a pretty easy one. <code data-astro-raw>F</code> in hex is 15.</p>
<p>Let’s do a larger one.</p>
<table>
  <colgroup>
    <col>
    <col span="4">
    <col span="4">
  </colgroup>
  <thead>
    <tr>
      <th colspan="9" scope="col">30<sub>10</sub></th>
    </tr>
  </thead>
  <tr>
    <td>30<sub>2</sub></td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
  </tr>
  <tr>
    <td>30<sub>16</sub></td>
    <td colspan="4">1</td>
    <td colspan="4">E</td>
  </tr>
</table>
<p>Okay, this one’s only a little different.</p>
<p>First, we already know to approach these conversions by starting from the largest possible digit in whatever numeral system we’re converting to and moving downward from there, but we can do it just by looking at the values present in each nibble.</p>
<table>
  <tr>
    <td>30<sub>2</sub></td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td class="table-highlight">1</td>
      <td class="table-highlight">1</td>
      <td class="table-highlight">1</td>
      <td class="table-highlight">0</td>
  </tr>
  <tr>
    <td>30<sub>16</sub></td>
    <td colspan="4">1</td>
    <td colspan="4">E</td>
  </tr>
</table>
<p>We know that <code data-astro-raw>1 1 1 0</code> is equal to 14. What’s 14 in hex? <code data-astro-raw>E</code>.</p>
<table>
  <tr>
    <td>30<sub>2</sub></td>
      <td class="table-highlight">0</td>
      <td class="table-highlight">0</td>
      <td class="table-highlight">0</td>
      <td class="table-highlight">1</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
  </tr>
  <tr>
    <td>30<sub>16</sub></td>
    <td colspan="4">1</td>
    <td colspan="4">E</td>
  </tr>
</table>
<p>Now, when we look at the second nibble, we know that <code data-astro-raw>0 0 0 1</code> is equal to 1. What’s 1 in hex? Well, it’s <code data-astro-raw>1</code>.</p>
<p>So, we have <code data-astro-raw>1E</code>.</p>
<p>Converting from binary to hex is as simple as breaking your binary number into nibbles of four digits each and substituting the hex value for each of those groups.</p>
<p>We don’t have to do anything special to convert in the other direction. Just look at the hex digit and convert it into a four-digit binary representation of that number.</p>
<p>Let’s break down a hex number into binary. Take the hex number <code data-astro-raw>2 4</code>. I know that one doesn’t have any letter representations, so it shouldn’t be too difficult.</p>
Starting with the LSB (the digit on the right), we have 4
<sub>
16
</sub>
. What’s 
<code data-astro-raw>4</code>
 in binary? It’s 
<code data-astro-raw>0 1 0 0</code>
. That’s our smallest nibble.
Now, when we move up it gets just a little more complicated because each successively larger digit in hex is a power of 16. But, we know that we have 2
<sub>
16
</sub>
 in that spot. So what we’re dealing with is two 16s — otherwise known as 32.
<p>Because we’re working on the second nibble in the binary number, we know that the first digit in that nibble represents 16, the second one represents 32. So our binary value for the second digit is <code data-astro-raw>0 0 1 0</code>.</p>
<p>Our full binary number is <code data-astro-raw>0 0 1 0 0 1 0 0</code>.</p>
<h3 id="simple-base-conversion">Simple Base Conversion</h3>
<p>The above conversion method works for other bases as well. All we have to do is think about how many bits make up a digit of the number we’re converting to or from binary.</p>
<p><strong>Binary</strong>: 1 digit = 1 bit</p>
<p><strong>Quaternary</strong>: 1 digit = 2 bits</p>
<p><strong>Octal</strong>: 1 digit = 3 bits</p>
<p><strong>Hexdecimal</strong>: 1 digit = 4 bits</p>
<p><strong>32-bit</strong>: 1 digit = 5 bits</p>
<p>Let’s practice with a number.</p>
<p>The number <code data-astro-raw>237</code> in binary form is <code data-astro-raw>11101101</code>.</p>
<h4 id="quaternary">Quaternary</h4>
<p>Group binary into sets of two digits</p>
<p>Bin: <code data-astro-raw>11</code>, <code data-astro-raw>10</code>, <code data-astro-raw>11</code>, <code data-astro-raw>01</code></p>
<p>Decimal: <code data-astro-raw>3</code>, <code data-astro-raw>2</code>, <code data-astro-raw>3</code>, <code data-astro-raw>1</code></p>
<p>Quad: <code data-astro-raw>3</code>, <code data-astro-raw>2</code>, <code data-astro-raw>3</code>, <code data-astro-raw>1</code></p>
<h4 id="octal">Octal</h4>
<p>Bin: <code data-astro-raw>011</code>, <code data-astro-raw>101</code>, <code data-astro-raw>101</code></p>
<p>Decimal: <code data-astro-raw>3</code>, <code data-astro-raw>5</code>, <code data-astro-raw>5</code></p>
<p>Octal: <code data-astro-raw>3</code>, <code data-astro-raw>5</code>, <code data-astro-raw>5</code></p>
<h4 id="hexadecimal">Hexadecimal</h4>
<p>Bin: <code data-astro-raw>1110</code>, <code data-astro-raw>1101</code></p>
<p>Decimal: <code data-astro-raw>14</code>, <code data-astro-raw>13</code></p>
<p>Hex: <code data-astro-raw>E</code>, <code data-astro-raw>D</code></p>
<h4 id="32-bit">32-bit</h4>
<p>Bin: <code data-astro-raw>00111</code>, <code data-astro-raw>01101</code></p>
<p>Decimal: <code data-astro-raw>7</code>, <code data-astro-raw>13</code></p>
<p>Hex: <code data-astro-raw>7</code>, <code data-astro-raw>D</code></p>
<p>That’s it for binary/hex conversions! Tune in soon for bitwise operators and bit shifting!</p>]]></description><pubDate>Wed, 06 Oct 2021 07:16:00 GMT</pubDate></item><item><title><![CDATA[CS Basics: Detour - Nibbles, MSB, and LSB]]></title><link>https://trainingmontage.dev/posts/cs-basics-detour--nibbles-msb-and-lsb/</link><guid>https://trainingmontage.dev/posts/cs-basics-detour--nibbles-msb-and-lsb/</guid><description><![CDATA[<div class="toc">
  <div class="flow">
    <p>
      This post is the 3rd in a series about basic concepts in programming and Computer Science. You can find all the posts in the series below.
    </p>
    <ol>
      <li>
        <a href="/posts/cs-basics-binary-conversion">CS Basics: Binary Conversion</a>
      </li>
      <li>
        <a href="/posts/cs-basics-hex-and-32-bit-conversion">CS Basics: Hex and 32 Bit Conversion</a>
      </li>
      <li>
        <a href="/posts/cs-basics-detour--nibbles-msb-and-lsb">CS Basics: Detour - Nibbles, MSB, and LSB</a>
      </li>
      <li>
        <a href="/posts/cs-basics-converting-between-different-bases">CS Basics: Converting Between Different Bases</a>
      </li>
    </ol>
  </div>
</div>
<p>Up until now, I’ve been representing binary, quaternary, octal, and hexadecimal numbers a little incorrectly. I did this so we wouldn’t be dealing with too many concepts at once. So, let’s take a detour and look at the way binary numbers are traditionally represented.</p>
<p>Binary numbers are, at least in computer science, represented in groups of what’s called a <strong>nibble</strong>. A nibble is half of a <strong>byte</strong>. Because a byte is 8 <strong>bits</strong>, a nibble is 4 bits.</p>
<p>Each digit of a binary number represents a bit, but we don’t really represent binary numbers with a single digit. Instead, we represent all digits of a binary number in groups of 4 bits.</p>
<p>Since each bit can hold a maxinum of two values, a nibble can represent a range of 16 values from 0 - 15.</p>
<h3 id="a-table-of-nibbles">A Table of Nibbles</h3>
<table>
  <thead>
    <tr>
      <td style="border-color: transparent"></td>
      <th colspan="4" scope="col">N<sub>2</sub> Nibble</th>
    </tr>
  </thead>
  <tr>
    <th scope="row">0</th>
    <td>0</td>
    <td>0</td>
    <td>0</td>
    <td>0</td>
  </tr>
  <tr>
    <th scope="row">1</th>
    <td>0</td>
    <td>0</td>
    <td>0</td>
    <td>1</td>
  </tr>
  <tr>
    <th scope="row">2</th>
    <td>0</td>
    <td>0</td>
    <td>1</td>
    <td>0</td>
  </tr>
  <tr>
    <th scope="row">3</th>
    <td>0</td>
    <td>0</td>
    <td>1</td>
    <td>1</td>
  </tr>
  <tr>
    <th scope="row">4</th>
    <td>0</td>
    <td>1</td>
    <td>0</td>
    <td>0</td>
  </tr>
  <tr>
    <th scope="row">5</th>
    <td>0</td>
    <td>1</td>
    <td>0</td>
    <td>1</td>
  </tr>
  <tr>
    <th scope="row">6</th>
    <td>0</td>
    <td>1</td>
    <td>1</td>
    <td>0</td>
  </tr>
  <tr>
    <th scope="row">7</th>
    <td>0</td>
    <td>1</td>
    <td>1</td>
    <td>1</td>
  </tr>
  <tr>
    <th scope="row">8</th>
    <td>1</td>
    <td>0</td>
    <td>0</td>
    <td>0</td>
  </tr>
  <tr>
    <th scope="row">9</th>
    <td>1</td>
    <td>0</td>
    <td>0</td>
    <td>1</td>
  </tr>
  <tr>
    <th scope="row">10</th>
    <td>1</td>
    <td>0</td>
    <td>1</td>
    <td>0</td>
  </tr>
  <tr>
    <th scope="row">11</th>
    <td>1</td>
    <td>0</td>
    <td>1</td>
    <td>1</td>
  </tr>
  <tr>
    <th scope="row">12</th>
    <td>1</td>
    <td>1</td>
    <td>0</td>
    <td>0</td>
  </tr>
  <tr>
    <th scope="row">13</th>
    <td>1</td>
    <td>1</td>
    <td>0</td>
    <td>1</td>
  </tr>
  <tr>
    <th scope="row">14</th>
    <td>1</td>
    <td>1</td>
    <td>1</td>
    <td>0</td>
  </tr>
  <tr>
    <th scope="row">15</th>
    <td>1</td>
    <td>1</td>
    <td>1</td>
    <td>1</td>
  </tr>
</table>
<p>So, now that we know binary numbers are represented in nibbles, we can talk about the Least Significant Bit, or <strong>LSB</strong>, and the Most Significant Bit, or <strong>MSB</strong>.</p>
<p>For binary integers, the LSB is the <strong>bit position</strong> that gives the <strong>units value</strong>. If this were decimal, that would be the <em>ones</em>.</p>
<p>The MSB is the bit position that gives the <strong>highest value</strong> for that binary integer.</p>
<table>
<thead>
<tr>
<th>N<sub>10</sub></th>
<th>MSB</th>
<th></th>
<th></th>
<th>LSB</th>
</tr>
</thead>
<tbody>
<tr>
<td>10</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>11</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>The integers in the table above are, of course, only showing 4 bit numbers. The principle still stands for larger 1 byte numbers, though.</p>
<table>
<thead>
<tr>
<th>N<sub>10</sub></th>
<th>MSB</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th>LSB</th>
</tr>
</thead>
<tbody>
<tr>
<td>150</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>Usually the LSB is shown at the first position, in our case that’s all the way to the right. The MSB is shown in the last position, or all the way on the left. There are some differences in the way some processors have handled this but we don’t need to get into that for this post.</p>
<p>That’s it for nibbles, LSB, and MSB! We can get into converting between different bases on the next post.</p>
<p>After that, I’ll write about using bitwise operators with our different numbering systems so we can take full advantage of our newfound knowledge.</p>]]></description><pubDate>Tue, 05 Oct 2021 05:09:49 GMT</pubDate></item><item><title><![CDATA[CS Basics: Hex and 32 bit Conversion]]></title><link>https://trainingmontage.dev/posts/cs-basics-hex-and-32-bit-conversion/</link><guid>https://trainingmontage.dev/posts/cs-basics-hex-and-32-bit-conversion/</guid><description><![CDATA[<div class="toc">
  <div class="flow">
    <p>
      This post is the 2nd in a series about basic concepts in programming and Computer Science. You can find all the posts in the series below.
    </p>
    <ol>
      <li>
        <a href="/posts/cs-basics-binary-conversion">CS Basics: Binary Conversion</a>
      </li>
      <li>
        <a href="/posts/cs-basics-hex-and-32-bit-conversion">CS Basics: Hex and 32 Bit Conversion</a>
      </li>
      <li>
        <a href="/posts/cs-basics-detour--nibbles-msb-and-lsb">CS Basics: Detour - Nibbles, MSB, and LSB</a>
      </li>
      <li>
        <a href="/posts/cs-basics-converting-between-different-bases">CS Basics: Converting Between Different Bases</a>
      </li>
    </ol>
  </div>
</div>
<p>In the <a href="/posts/cs-basics-binary-conversion">last post</a> in this series, we covered converting binary, quaternary, and octal numbers. Now we’ll go through hexadecimal and 32 bit numbers. If you haven’t read the first post, go ahead and read it now then come back.</p>
<p>Converting hex and 32 bit numbers is pretty close to the same as converting smaller bases, but there’s one important difference — we have to be able to account for numbers larger than 9.</p>
<p>We already know that the decimal system, or regular integers, can go from 0 - 9 in each digit. The trouble with something like hexadecimal, or Base16, numbers (and higher) is that there’s no way to represent something larger than 9 with a single-digit integer.</p>
<p>So what do we do?</p>
<p>Well, we use letter characters.</p>
<p>For hex and 32-bit numbers 0 - 9 are the same as decimal. When the digit gets larger than 9 we use letters.</p>
<p><strong>Hex</strong>: 1 - 9, A - F</p>
<p><strong>32 Bit</strong>: 1 - 9, A - V</p>
<p>That’s it!</p>
<h3 id="hexadecimal-base16">Hexadecimal (Base16)</h3>
<table>
<thead>
<tr>
<th></th>
<th>65536</th>
<th>4096</th>
<th>256</th>
<th>16</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>A</td>
</tr>
<tr>
<td>11</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>B</td>
</tr>
<tr>
<td>12</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>C</td>
</tr>
<tr>
<td>13</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>D</td>
</tr>
<tr>
<td>14</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>E</td>
</tr>
<tr>
<td>15</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>F</td>
</tr>
<tr>
<td>16</td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>17</td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>26</td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td>A</td>
</tr>
</tbody>
</table>
<p>As you can see, each digit in hexadecimal can represent 16 unique numbers.</p>
Two digits can represent 256 unique numbers. If you’ve used hex colors, you’re using hexadecimal numbers with six digits. That’s 
<span class="highlight">
256
<sup>
3
</sup>
</span>
, or 16,777,216, color values.
<p>Honestly, this table could go on forever, so I’m going to whip up a hex multiplication table with client-side JavaScript and you can use that for reference if you need to.</p>
<p>JavaScript provides some nice convenience methods for converting a binary number to a different base representation. To get the values for the table below, all I had to do was multiply two values and then write <code data-astro-raw>cellValue = product.toString(16)</code>, which will convert an integer to a string that represents the given base’s value.</p>
<table id="hex-table">
</table>
<script>
  const vals = [' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];
  const nums = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];

  const table = document.getElementById('hex-table');
  let head = table.createTHead();
  let row = head.insertRow();
  for(let key of vals) {
    let th = document.createElement('th');
    let text = document.createTextNode(key);
    th.appendChild(text);
    row.appendChild(th);
  }

  for(let i = 0; i < vals.length - 1; i++) {
    let row = table.insertRow();
    let cell = row.insertCell();
    cell.className = 'table-head-cell';
    let text = document.createTextNode(vals[i + 1]);
    cell.appendChild(text);
    for(let j = 0; j < nums.length - 1; j++) {
      let tcell = row.insertCell();
      const numValue = nums[i] * nums[j];
      const conVal = numValue.toString(16).toUpperCase();
      let ttext = document.createTextNode(conVal);
      tcell.appendChild(ttext);
      // console.log(nums[i] * nums[j]);
    }
  }
</script>
<p>So, that leaves 32-bit conversions. Those behave exactly the same as hexadecimal conversions, but since we’re dealing with numbers larger than 15, we need to include additional substitution characters.</p>
<p>Two 32-bit digits can account for 1,024 decimal numbers.</p>
<p>Here’s a 32-bit table (hopefully the table works for smaller screens, because it’s going to be pretty big).</p>
<table id="table-thirtytwo">
</table>
<script>
  const vals32 = [' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V'];
  const nums32 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32];

  const table32 = document.getElementById('table-thirtytwo');
  let head32 = table32.createTHead();
  let row32 = head32.insertRow();
  for(let key of vals32) {
    let th32 = document.createElement('th');
    let text32 = document.createTextNode(key);
    th32.appendChild(text32);
    row32.appendChild(th32);
  }

  for(let i = 0; i < vals32.length - 1; i++) {
    let row32 = table32.insertRow();
    let cell32 = row32.insertCell();
    cell32.className = 'table-head-cell';
    let text32 = document.createTextNode(vals32[i + 1]);
    cell32.appendChild(text32);
    for(let j = 0; j < nums32.length - 1; j++) {
      let tcell32 = row32.insertCell();
      const numValue32 = nums32[i] * nums32[j];
      const conVal32 = numValue32.toString(32).toUpperCase();
      let ttext32 = document.createTextNode(conVal32);
      tcell32.appendChild(ttext32);
      // console.log(nums[i] * nums[j]);
    }
  }
</script>
<p>Next time we’ll go over converting from one non-decimal base, like binary, to another base, like hex.</p>]]></description><pubDate>Mon, 04 Oct 2021 15:06:01 GMT</pubDate></item><item><title><![CDATA[CS Basics: Binary Conversion]]></title><link>https://trainingmontage.dev/posts/cs-basics-binary-conversion/</link><guid>https://trainingmontage.dev/posts/cs-basics-binary-conversion/</guid><description><![CDATA[<div class="toc">
  <div class="flow">
    <p>
      This post is the 1st in a series about basic concepts in programming and Computer Science. You can find all the posts in the series below.
    </p>
    <ol>
      <li>
        <a href="/posts/cs-basics-binary-conversion">CS Basics: Binary Conversion</a>
      </li>
      <li>
        <a href="/posts/cs-basics-hex-and-32-bit-conversion">CS Basics: Hex and 32 Bit Conversion</a>
      </li>
      <li>
        <a href="/posts/cs-basics-detour--nibbles-msb-and-lsb">CS Basics: Detour - Nibbles, MSB, and LSB</a>
      </li>
      <li>
        <a href="/posts/cs-basics-converting-between-different-bases">CS Basics: Converting Between Different Bases</a>
      </li>
    </ol>
  </div>
</div>
<p>Binary conversion was one of those things I glossed over when I first started learning to program.</p>
<p>Actually, that’s not true, it’s something I glossed over until it got me into trouble. I know I shouldn’t have but the subject, like a lot of math-based subjects, just made my eyes glaze over as soon as someone started talking about it or teaching it. I just figured I would learn it properly when I really needed to.</p>
<p>It turns out “when I really needed to” passed some time before my second exam in Data Structures and Algorithms class yesterday.</p>
<p>The test itself was supposed to cover recursion and function templates in C++. Imagine my surprise and horror when 10 of the 40 questions asked us to convert numbers from decimal to different bases.</p>
<p>I was completely unprepared to even tackle the most basic of the questions and failed the exam miserably.</p>
<p>So, I’m going to go through these base conversions and learn them properly.</p>
<p>You, dear coder, are invited to come along and learn from my mistakes.</p>
<h2 id="how-we-write-numbers">How we write numbers</h2>
<p>To understand how to convert from our regular, decimal-based number system to binary, we first need to look at how our number system works.</p>
<p>Take the number <code data-astro-raw>555</code> as an example. We think of that as a three-digit number, each digit being a 5. That’s actually not the best way to think about <code data-astro-raw>555</code>.</p>
<p>Remember grade school? Remember how our teachers walked us through those digit places back in the day? Ones, Tens, Hundreds, etc? Turns out that’s all pretty important when you try to understand number systems.</p>
What you have with the number 
<code data-astro-raw>555</code>
 is 
<span class="highlight">
555 = 500 + 50 + 5
</span>
.
We could also say 
<span class="highlight">
555 = (5 * 100) + (5 * 10) + (5 * 1)
</span>
.
Or, if we want to get really explicit, we could say 
<span class="highlight">
555 = (5 * 10
<sup>
2
</sup>
) + (5 * 10
<sup>
1
</sup>
) + (5 * 10
<sup>
0
</sup>
)
</span>
.
<p>We’re used to not even thinking about this, but each digit in our number system represents a slot that’s multiplied by an exponent of 10.</p>
<p>Here, have a table that illustrates the point:</p>
<h3 id="555">555</h3>
<table>
<thead>
<tr>
<th>500</th>
<th>50</th>
<th>5</th>
</tr>
</thead>
<tbody>
<tr>
<td>5 * 100</td>
<td>5 * 10</td>
<td>5 * 1</td>
</tr>
<tr>
<td>5 * 10<sup>2</sup></td>
<td>5 * 10<sup>1</sup></td>
<td>5 * 10<sup>0</sup></td>
</tr>
</tbody>
</table>
<p>Let’s try another.</p>
<h3 id="679">679</h3>
<table>
<thead>
<tr>
<th>600</th>
<th>70</th>
<th>9</th>
</tr>
</thead>
<tbody>
<tr>
<td>6 * 100</td>
<td>7 * 10</td>
<td>9 * 1</td>
</tr>
<tr>
<td>6 * 10<sup>2</sup></td>
<td>7 * 10<sup>1</sup></td>
<td>9 * 10<sup>0</sup></td>
</tr>
</tbody>
</table>
<p>Do you see what’s happening here? Each of the slots (digits) in our number systems is a power of 10, with the lowest power all the way to the right. The power of 10 we multiply by increases by one with each slot we move to from there.</p>
Another way to think about breaking down these numbers into their constituent parts is by subtracting the largest number that fits into the largest slot, then moving on to the next largest, and so on, until you’re at a 
<span class="highlight">
10
<sup>
0
</sup>
</span>
 number.
<span class="highlight">
679 - 600 = 79
</span>
<span class="highlight">
79 - 70 = 9
</span>
<span class="highlight">
9
</span>
<p>That’s essentially the logic every other numeral system we’ll be covering works. With binary, each slot is a power of 2. Quaternary? That’s a power of 4.</p>
<p>Let’s start with binary and work our way up.</p>
<h2 id="binary-base-2">Binary (Base-2)</h2>
<p>We know each slot in binary represents a power of 2. Just like with base-10, each of those slots begins with <code data-astro-raw>0</code>. Because our base is 2, the only other available number for a slot is <code data-astro-raw>1</code>. In each slot, a <code data-astro-raw>1</code> means that number is present. A <code data-astro-raw>0</code> means the number is not present.</p>
<p>Let’s look at what that means in a table with no specific number to write.</p>
<table>
<thead>
<tr>
<th>2<sup>4</sup></th>
<th>2<sup>3</sup></th>
<th>2<sup>2</sup></th>
<th>2<sup>1</sup></th>
<th>2<sup>0</sup></th>
</tr>
</thead>
<tbody>
<tr>
<td>16</td>
<td>8</td>
<td>4</td>
<td>2</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>Okay, now let’s break down a couple of simple numbers with tables to see what binary is all about.</p>
<h3 id="02">0<sub>2</sub></h3>
<table>
<thead>
<tr>
<th>16</th>
<th>8</th>
<th>4</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>0</td>
</tr>
</tbody>
</table>
<p>Surprise! <code data-astro-raw>0</code> is <code data-astro-raw>0</code>.</p>
<p><strong>Decimal: 0</strong></p>
<p><strong>Binary: 0</strong></p>
<h3 id="12">1<sub>2</sub></h3>
<table>
<thead>
<tr>
<th>16</th>
<th>8</th>
<th>4</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1</td>
</tr>
</tbody>
</table>
<p>Also probably not much of a surprise.</p>
<p><strong>Decimal: 1</strong></p>
<p><strong>Binary: 1</strong></p>
<h3 id="22">2<sub>2</sub></h3>
<table>
<thead>
<tr>
<th>16</th>
<th>8</th>
<th>4</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>Okay, now we start seeing how this really works. The decimal number <code data-astro-raw>2</code> means there’s one number present in the second slot, and zero numbers present in the first slot.</p>
<p><strong>Decimal: 2</strong></p>
<p><strong>Binary: 10</strong></p>
<h3 id="32">3<sub>2</sub></h3>
<table>
<thead>
<tr>
<th>16</th>
<th>8</th>
<th>4</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>Three is <code data-astro-raw>2 + 1</code>, so there’s one number present in the first slot and one number present in the second slot.</p>
<p><strong>Decimal: 3</strong></p>
<p><strong>Binary: 11</strong></p>
<h3 id="42">4<sub>2</sub></h3>
<table>
<thead>
<tr>
<th>16</th>
<th>8</th>
<th>4</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<p><strong>Decimal: 4</strong></p>
<p><strong>Binary: 100</strong></p>
<h3 id="52">5<sub>2</sub></h3>
<table>
<thead>
<tr>
<th>16</th>
<th>8</th>
<th>4</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
<p><strong>Decimal: 5</strong></p>
<p><strong>Binary: 101</strong></p>
<h3 id="82">8<sub>2</sub></h3>
<table>
<thead>
<tr>
<th>16</th>
<th>8</th>
<th>4</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<p><strong>Decimal: 8</strong></p>
<p><strong>Binary: 1000</strong></p>
<p>Hopefully, you see how this is progressing. If not, go back to where I mentioned subtracting the largest power multiple you can from your base-10 number and moving downward from there. Let’s try a slightly larger number and work through it so it’s plain to see how it works.</p>
<h3 id="1002">100<sub>2</sub></h3>
<p>The largest number that’s a power of 2 that can be subtracted from <code data-astro-raw>100</code> is <code data-astro-raw>64</code>, so we start there.</p>
<p><code data-astro-raw>100 - 64 = 36</code></p>
<p>Now we move to <code data-astro-raw>36</code>. The largest number that’s a square of 2 that can be subtracted from <code data-astro-raw>36</code> is <code data-astro-raw>32</code></p>
<p><code data-astro-raw>36 - 32 = 4</code></p>
And that lands us in a good spot because 
<code data-astro-raw>4</code>
 is 
<span class="highlight">
2
<sup>
2
</sup>
</span>
.
<table>
<thead>
<tr>
<th>64</th>
<th>32</th>
<th>16</th>
<th>8</th>
<th>4</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<p><strong>Decimal: 100</strong></p>
<p><strong>Binary: 1100100</strong></p>
<p>Pretty simple, right? Here’s a basic binary multiplication table (I skip a lot of in-between values, but this should be enough to help you understand what’s happening).</p>
<p>After that, we’ll move on to some other numeral systems and apply what we know.</p>
<table>
<thead>
<tr>
<th></th>
<th>64</th>
<th>32</th>
<th>16</th>
<th>8</th>
<th>4</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>4</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>8</td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>16</td>
<td></td>
<td></td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>32</td>
<td></td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>64</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<h2 id="quaternary-base-4">Quaternary (Base 4)</h2>
<p>We can have 4 values in each slot (0 - 3).</p>
<table>
<thead>
<tr>
<th></th>
<th>256</th>
<th>64</th>
<th>16</th>
<th>4</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>8</td>
<td></td>
<td></td>
<td></td>
<td>2</td>
<td>0</td>
</tr>
<tr>
<td>12</td>
<td></td>
<td></td>
<td></td>
<td>3</td>
<td>0</td>
</tr>
<tr>
<td>16</td>
<td></td>
<td></td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>32</td>
<td></td>
<td></td>
<td>2</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>48</td>
<td></td>
<td></td>
<td>3</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>64</td>
<td></td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>128</td>
<td></td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>192</td>
<td></td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>256</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>512</td>
<td>2</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>768</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<h3 id="octalbase-8">Octal(Base 8)</h3>
<p>Now each slot can have 8 values (0 - 7)</p>
<table>
<thead>
<tr>
<th></th>
<th>4096</th>
<th>512</th>
<th>64</th>
<th>8</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1</td>
</tr>
<tr>
<td>8</td>
<td></td>
<td></td>
<td></td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>64</td>
<td></td>
<td></td>
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>512</td>
<td></td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>4096</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>Okay, that’s it for the basic number conversions. Next time we’ll cover hexadecimal and 32 bit conversions.</p>]]></description><pubDate>Sat, 02 Oct 2021 11:25:05 GMT</pubDate></item></channel></rss>